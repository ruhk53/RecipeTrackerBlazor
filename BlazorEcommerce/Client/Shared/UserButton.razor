@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        <div class="rz-text-align-center">
            <RadzenProfileMenu Click="@(args => OnClick(args))">
                <Template>
                    <RadzenGravatar Email="@email">
                    </RadzenGravatar>
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Logout" Icon="account_circle"></RadzenProfileMenuItem>
                </ChildContent>
            </RadzenProfileMenu>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="rz-text-align-center">
            <RadzenProfileMenu Click="@(args => OnClick(args))">
                <Template>
                    <RadzenGravatar Email="default@user.com">
                    </RadzenGravatar>
                </Template>
                <ChildContent>
                    <RadzenProfileMenuItem Text="Login" Icon="account_circle"></RadzenProfileMenuItem>
                </ChildContent>
            </RadzenProfileMenu>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    string email = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var result = await AuthService.GetUserEmail();
        email = result.Success ? result.Data : "default@web.com";
    }

    private async Task OnClick(RadzenProfileMenuItem e)
    {
        if (e.Text == "Logout")
        {
            await LocalStorage.RemoveItemAsync("authToken");
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("");
        } else if (e.Text == "Login")
        {
            NavigationManager.NavigateTo("login");
        }
    }
}
